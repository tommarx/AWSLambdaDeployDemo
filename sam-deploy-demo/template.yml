AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-deploy-demo

  Sample SAM Template for sam-deploy-demo

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:

  ExistingBucketName:
    Type: String
    Default: "org.tommarx.s3-lambda-bucket"

  LoggingBucketName:
    Type: String
    Default: "org.tommarx.s3tolambda.logging"

Resources:

  # LoggingBucket:
  #   Type: AWS::S3::Bucket
  #   DeletionPolicy: Retain
  #   Properties:
  #     BucketName: !Ref LoggingBucketName

  WriteToLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucketName
      # Bucket:
      #   Ref: LoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource:
              !Sub |-
                arn:aws:s3:::${LoggingBucketName}
          -
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${LoggingBucketName}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"

  LoggingTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - WriteToLoggingBucketPolicy
    Properties:
      TrailName: !Ref ExistingBucketName
      S3BucketName: !Ref LoggingBucketName
        # Ref: LoggingBucket
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - DataResources:
          - Type: AWS::S3::Object
            Values:
              - !Sub |-
                arn:aws:s3:::${ExistingBucketName}/
      IncludeGlobalServiceEvents: false

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Event rule"
      State: "ENABLED"
      EventPattern:
        source:
          - "aws.s3"
        detail:
          eventName:
            - "PutObject"
          requestParameters:
            bucketName:
              - !Ref ExistingBucketName
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "LambdaTestFunction"
              - "Arn"
          Id: "LambdaTestFunctionTarget"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "LambdaTestFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventRule"
          - "Arn"

  PreTrafficHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tests/deployment
      Handler: pre_traffic_hook_tests.lambda_handler
      Runtime: python3.8

  LambdaTestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: test_function/
      Handler: app.lambda_handler
      Runtime: python3.8
      DeploymentPreference:
        Type: AllAtOnce
        Hooks:
          PreTraffic: !Ref PreTrafficHookFunction
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "s3:ListAllMyBuckets"
              Resource: "*"
      Events:
        LambdaTest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /invoke
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  LambdaTestApi:
    Description: "API Gateway endpoint URL for Prod stage for LambdaTest function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/invoke/"
  LambdaTestFunction:
    Description: "Lambda Test Function ARN"
    Value: !GetAtt LambdaTestFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Lambda Test function"
    Value: !GetAtt LambdaTestFunctionRole.Arn
